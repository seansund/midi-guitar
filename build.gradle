/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

group = 'midi-guitar'
version = '0.5.0'

dependencies {
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3
    // https://mvnrepository.com/artifact/io.reactivex.rxjava3/rxjava
    implementation group: 'io.reactivex.rxjava3', name: 'rxjava', version: '3.1.10'
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.11.3')
        }
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.12"
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/seansund/maven")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GIT_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GIT_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from components.java
        }
    }
}
